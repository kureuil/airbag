{"name":"Airbag","tagline":"Simple testrunner written in Python","body":"# Airbag [![Build Status](https://travis-ci.org/kureuil/airbag.svg)](https://travis-ci.org/kureuil/airbag) [![Coverage Status](https://coveralls.io/repos/kureuil/airbag/badge.svg?branch=master&service=github)](https://coveralls.io/github/kureuil/airbag?branch=master)\r\n\r\nSimple testrunner written in Python.\r\n\r\n# Installation\r\n\r\nClone this repo and run in a terminal:\r\n\r\n```bash\r\n$ sudo python3 setup.py install\r\n```\r\n\r\n# Usage\r\n\r\n```bash\r\n$ airbag -h\r\nusage: airbag [-h] [-d DIR] [-f FILE] [-V]\r\n\r\nRuns functional tests on your programs\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -d DIR, --working-dir DIR\r\n                        Changes the working directory\r\n  -f FILE, --input-file FILE\r\n                        Changes the configuration used\r\n  -F FORMATTER, --formatter FORMATTER\r\n                        Formatter used to display the output. Default is `cli`\r\n  -O [OUTPUTS [OUTPUTS ...]], --out-fmt [OUTPUTS [OUTPUTS ...]]\r\n                        Additional formatters to use with their file\r\n                        destination\r\n  -V, --version         Displays the current program\\'s version and exit\r\n```\r\n\r\nBy default, DIR will be the current working directory and FILE will be `airbag.toml`.\r\n\r\n# Configuration\r\n\r\nConfiguration is done inside the `airbag.toml` file, written in [Toml](http://github.com/toml-lang/toml).\r\n\r\nThere's a table named `global` and a table array named `tests`. The `global` table properties' are scoped to all the tests. For each test you can define :\r\n\r\n- `type` [string]\\(**mandatory**): the test runner type\r\n- `project` [string]\\(default: `''`): the project name\r\n- `program` [string]\\(**mandatory**): the default program to be run\r\n- `name` [string]\\(default: `''`): the test's name\r\n- `args` [array]\\(default: `[]`): the default program arguments\r\n- `input` [string]\\(default: `''`): the program standard input\r\n- `timeout` [int]\\(default: `15`): time given to the program to finish its execution\r\n- `emptyenv` [bool]\\(default: `false`): should the environment be emptied before executing the program\r\n- `env` [table]\\(default: `{}`): environment keys to be set. Overrides already defined keys.\r\n- `expected` [string|table]\\(default: `''`): table to compare various things once a program executed. If it is a string, shortcut to compare stdout.\r\n - `output` [string]\\(default: `''`): expected standard output. Can be a file.\r\n - `errors` [string]\\(default: `''`): expected standard error. Can be a file.\r\n - `returncode` [integer]\\(default: `0`): expected exit code.\r\n - `timeout` [bool]\\(default: `false`): should the program timeout?\r\n\r\n`input`, `expected.output` & `expected.errors` can be assigned a file contents by setting their value to the file path prefixed by `file:`.\r\n\r\n## Configuration parsers\r\n\r\nConfiguration parsers in airbag are totally configurable. Anyone can write their own configuration parsers.\r\n\r\nTo register a configuration parser, register a class on the `airbag.parsers` entry point. TODO: document this feature, meanwhile see [toml.py](https://github.com/kureuil/airbag/blob/master/airbag_toml/toml.py).\r\n\r\nFor practical reasons, airbag ships with a toml configuration parsers.\r\n\r\n## Test runners\r\n\r\nAs for configuration parsers, test runners are totally configurable.\r\n\r\nTo register a test runner, register a class on the `airbag.runners` entry point. TODO: document this feature, meanwhile see [runner.py](https://github.com/kureuil/airbag/blob/master/airbag_program/runner.py).\r\n\r\nFor practical reasons, airbag ships with a program test runner, which you can see an example below.\r\n\r\n# Example\r\n\r\n```toml\r\n\r\n[global]\r\nproject = \"Dummy project\"\r\nprogram = \"foo\"\r\nargs = []\r\ntype = \"program\"\r\n\r\n[[tests]]\r\nname = \"It should work with invalid parameters\"\r\nargs = [\"Hello\", \"World\", \"--invalid-opt\"]\r\nexpected = \"\"\r\nemptyenv = true\r\n    [tests.env]\r\n    PATH = \"/usr/bin\"\r\n    USER = \"kureuil\"\r\n\r\n[[tests]]\r\nname = \"Testing another program\"\r\nprogram = \"echo\"\r\nargs = [\"-n\", \"Hello\", \"World\"]\r\ntimeout = 2\r\ninput = \"file:input.txt\"\r\n    [tests.expected]\r\n    returncode = 0\r\n    errors = \"file:empty-file.txt\"\r\n    output = \"Hello World\"\r\n\r\n```\r\n\r\n# License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 Louis \"Kureuil\" Person\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n","google":"UA-65615181-2","note":"Don't delete this file! It's used internally to help with page regeneration."}